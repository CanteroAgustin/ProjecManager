<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        ///x////+H////wf///+A+f//4AH///gB/8=
</value>
  </data>
</root>